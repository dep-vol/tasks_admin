{"version":3,"sources":["components/Input/Input.module.css","components/EditTaskForm/EditTaskForm.module.css","components/Input/Input.tsx","components/TaskForm/TaskForm.tsx","components/AddTaskForm/AddTaskForm.tsx","components/EditTaskForm/EditTaskForm.tsx","App.tsx","serviceWorker.ts","index.tsx","components/TaskForm/TaskForm.module.css"],"names":["module","exports","Input","label","type","name","inputId","changeHandle","isCleared","defaultValue","editMode","isUndo","useState","inputState","setInputState","editedClassName","setEditedClassName","useEffect","prevState","handleInputChange","useCallback","event","target","value","checked","attr","className","styles","checkInput","textInput","toString","container","teacherLabel","onChange","TaskForm","props","title","addAnswer","setState","data","answers","text","delAnswer","slice","length","Error","description","undefined","map","answer","i","setOfTeachers","Set","teachers","delete","Array","from","sort","checkSubmit","state","every","udoChanges","changeMainAnswer","e","el","preventDefault","newAnswers","main","checkMainChoosed","some","this","prevProps","isSaved","onSubmit","handleSubmit","answersBtn","onClick","deleteBtn","disabled","key","doMainBtn","undoMainBtn","teacher","includes","submitBtn","to","goBtn","Component","AddTaskForm","tasks","console","log","tasksFromStorage","localStorage","getItem","JSON","parse","setItem","stringify","EditTaskForm","switchEditState","index","isEditActive","editedTask","editedTaskIndex","editedTasksBefore","editedTasksAfter","storedTasks","task","taskContainer","App","path","component","exact","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,UAAY,yBAAyB,UAAY,yBAAyB,WAAa,0BAA0B,aAAe,4BAA4B,OAAS,wB,mBCAvLD,EAAOC,QAAU,CAAC,UAAY,gCAAgC,cAAgB,oCAAoC,UAAY,kC,uQCejHC,EAAyB,SAAC,GAW9B,IATLC,EASI,EATJA,MACAC,EAQI,EARJA,KACAC,EAOI,EAPJA,KACAC,EAMI,EANJA,QACAC,EAKI,EALJA,aACAC,EAII,EAJJA,UACAC,EAGI,EAHJA,aACAC,EAEI,EAFJA,SACAC,EACI,EADJA,OACI,EAE8BC,mBAAS,eAAEP,EAAOI,IAFhD,mBAECI,EAFD,KAEaC,EAFb,OAIwCF,mBAAS,IAJjD,mBAICG,EAJD,KAIkBC,EAJlB,KAUNC,qBAAU,WAELP,IACDI,GAAe,SAAAI,GAAS,kCAASA,GAAT,kBAAqBb,EAAOI,OACjDE,GACDK,EAAmB,KAIpBR,GAECM,EADW,cAATT,EACY,eAAEA,GAAO,GAGT,eAAEA,EAAO,OAG1B,CAACG,EAAWH,EAAMI,EAAcC,EAAUC,IAG7C,IAAMQ,EAAoBC,uBAAY,SAACC,GAErC,IAAMC,EAASD,EAAMC,OAEfC,EAAwB,cAAhBD,EAAOjB,KAAuBiB,EAAOE,QAAUF,EAAOC,MAEpET,GAAc,SAACI,GAAD,mBAAC,eACVA,GADS,kBACGI,EAAOjB,KAAQkB,OAG7Bb,IAAaC,GACdK,EAAmB,UAGrBT,GAAgBA,EAAagB,EAAOlB,EAAMC,KAEzC,CAACC,EAAcD,EAASD,EAAMK,EAAUC,IAErCc,EAAgB,aAATrB,EACT,CAACsB,UAAU,GAAD,OAAKC,IAAOC,WAAZ,YAA0BD,IAAOZ,IAAoBX,OAAMC,OAAMmB,UAAWX,EAAWR,IACjG,CAACqB,UAAU,GAAD,OAAKC,IAAOE,UAAZ,YAAyBF,IAAOZ,IAAoBX,OAAMC,OAAMkB,MAAOV,EAAWR,GAAMyB,YAGtG,OACE,yBAAKJ,UAAWC,IAAOI,WACrB,+BACE,uBAAGL,UAAoB,aAATtB,EAAsBuB,IAAOK,aAAe,IAAK7B,EAA/D,MACA,2CAAWsB,EAAX,CAAiBQ,SAAUd,Q,gBCjEtBe,EAAb,kDACE,WAAYC,GAAe,IAAD,8BACxB,cAAMA,IAoCRC,MAAQ,EAAKD,MAAMzB,SACf,2JACA,mIAvCsB,EAyC1B2B,UAAY,WACV,EAAKC,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IACEqB,KAAK,2BAAKrB,EAAUqB,MAAhB,IAAsBC,QAAQ,GAAD,mBAAMtB,EAAUqB,KAAKC,SAArB,CAA8B,CAACC,KAAM,cA3C9D,EA+C1BC,UAAY,WACV,EAAKJ,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IAEZqB,KAAK,2BAAKrB,EAAUqB,MAAhB,IAAsBC,QAAStB,EAAUqB,KAAKC,QAAQG,MAAM,EAAGzB,EAAUqB,KAAKC,QAAQI,OAAS,WAlD7E,EAuD1BrC,aAAkC,SAACgB,EAAOnB,EAAME,GAC9C,OAAQF,GACR,IAAK,cACH,GAAsB,kBAAXmB,EAMT,MAAM,IAAIsB,MAAM,yBALhB,EAAKP,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IACEqB,KAAK,2BAAKrB,EAAUqB,MAAhB,IAAsBO,YAAavB,SAMzD,MAEF,IAAK,SACmB,kBAAXA,GACT,EAAKe,UAAS,SAACpB,GACb,QAAgB6B,IAAZzC,EAIF,OAFeY,EAAUqB,KAAKC,QAAQlC,GAG7B,2BACFY,GADL,IACgBqB,KAAK,2BACdrB,EAAUqB,MADG,IACGC,QAAStB,EAAUqB,KAAKC,QAAQQ,KAAI,SAACC,EAAQC,GAC9D,OAAOA,IAAM5C,EAAN,2BAAoB2C,GAApB,IAA4BR,KAAMlB,IAAS0B,SAKjD,2BACF/B,GADL,IACgBqB,KAAK,2BACdrB,EAAUqB,MADG,IACGC,QAAQ,GAAD,mBAAMtB,EAAUqB,KAAKC,SAArB,CAA8B,CAACC,KAAMlB,SAMrE,MAAM,IAAIsB,MAAM,4BAKtB,MAGF,IAAK,YACH,QAAgBE,IAAZzC,EAeF,MAAM,IAAIuC,MAAM,yBAdhB,EAAKP,UAAS,SAACpB,GAEb,IAAMiC,EAAgB,IAAIC,IAAJ,sBAAYlC,EAAUqB,KAAKc,UAA3B,CAAqC/C,KAK3D,OAJKiB,GACH4B,EAAcG,OAAOhD,GAGhB,2BACFY,GADL,IACgBqB,KAAK,2BAAKrB,EAAUqB,MAAhB,IAAsBc,SAAS,YAAKE,MAAMC,KAAKL,GAAeM,iBA9GhE,EA4H1BC,YAAc,WACZ,MAAwC,KAAhC,EAAKC,MAAMpB,KAAKO,aAClB,EAAKa,MAAMpB,KAAKC,QAAQI,OAAS,GACjC,EAAKe,MAAMpB,KAAKC,QAAQoB,OAAM,SAAAX,GAAM,MAAoB,KAAhBA,EAAOR,SAC/C,EAAKkB,MAAMpB,KAAKc,SAAST,OAAS,GAhIhB,EAmI1BiB,WAAa,WACX,EAAKvB,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IACEqB,KAAK,eAAK,EAAKJ,MAAMI,MAAO5B,QAAQ,QArI5B,EAyI1BmD,iBAAmB,SAACC,EAAoBC,EAAsC5D,GAC5E2D,EAAEE,iBACF,IAAMC,EAAa,EAAKP,MAAMpB,KAAKC,QAAQQ,KAAI,SAACC,GAC9C,GAAIe,IAAOf,EAWT,OAAOA,EAVP,OAAO7C,GACP,IAAK,MACH,OAAO,YAAC,eAAI6C,GAAZ,IAAoBkB,MAAM,IAE5B,IAAK,MACH,MAAQ,CAAC1B,KAAMQ,EAAOR,MAExB,QAAS,OAAOQ,MAOpB,EAAKX,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IACEqB,KAAK,2BAAKrB,EAAUqB,MAAhB,IAAsBC,QAAS0B,UA5J3B,EAkK1BE,iBAAmB,WACjB,OAAO,EAAKT,MAAMpB,KAAKC,QAAQ6B,MAAK,SAAApB,GAAM,OAAIA,EAAOkB,MAAwB,KAAhBlB,EAAOR,SAhKpE,EAAKkB,MAAQ,CACXpB,KAAM,CACJO,YAAa,GACbN,QAAS,GACTa,SAAU,IAEZ1C,QAAQ,GATc,EAD5B,gEAeuB,IAAD,OAClB2D,KAAKhC,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IACEqB,KAAK,2BAAKrB,EAAUqB,MAAS,EAAKJ,MAAMI,aAjB5D,yCAsBqBgC,GAAmB,IAAD,OAE/BA,EAAUC,UAAYF,KAAKnC,MAAMqC,SACnCF,KAAKhC,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IACEqB,KAAK,2BAAKrB,EAAUqB,MAAS,EAAKJ,MAAMI,WAItD+B,KAAKX,MAAMhD,QACb2D,KAAKhC,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IACEP,QAAQ,SAhC9B,+BAuKY,IAAD,OACP,OACE,6BACE,4BAAK2D,KAAKlC,OAEV,0BAAMV,UAAU,OAAO+C,SAAU,SAACV,GAAD,OAAO,EAAK5B,MAAMuC,aAAaX,EAAG,EAAKJ,MAAMpB,QAE5E,kBAAC,EAAD,CACEpC,MAAM,6CACNC,KAAM,OACNC,KAAK,cACLE,aAAc+D,KAAK/D,aACnBC,UAAW8D,KAAKnC,MAAMqC,QACtB/D,aAAc6D,KAAKX,MAAMpB,KAAKO,YAC9BpC,SAAU4D,KAAKnC,MAAMzB,SACrBC,OAAQ2D,KAAKX,MAAMhD,SAGrB,yBAAKe,UAAWC,IAAOa,SACrB,qHACA,6BACE,4BACEd,UAAWC,IAAOgD,WAClBvE,KAAK,SACLwE,QAASN,KAAKjC,WAHhB,KAOA,4BACEX,UAAS,UAAKC,IAAOgD,WAAZ,YAA0BhD,IAAOkD,WAC1CzE,KAAK,SACLwE,QAASN,KAAK5B,UACdoC,SAA6C,IAAnCR,KAAKX,MAAMpB,KAAKC,QAAQI,QAJpC,OAWH0B,KAAKX,MAAMpB,KAAKC,QAAQQ,KAAI,SAACgB,EAAId,GAEhC,OACE,yBAAK6B,IAAK7B,EAAI,QACZ,6BACE,4BACExB,UAAWC,IAAOqD,UAClBJ,QAAS,SAACb,GAAD,OAAM,EAAKD,iBAAiBC,EAAGC,EAAI,QAC5Cc,SAAU,EAAKV,oBAHjB,+FAQA,4BACE1C,UAAWC,IAAOsD,YAClBL,QAAS,SAACb,GAAD,OAAM,EAAKD,iBAAiBC,EAAGC,EAAI,SAF9C,qDAQF,kBAAC,EAAD,CACE7D,MAAK,gDAAa+C,EAAI,EAAjB,cAAwBc,EAAGG,KAAO,qDAAe,KACtD/D,KAAK,OACLC,KAAK,SACLC,QAAS4C,EACT3C,aAAc,EAAKA,aACnBC,UAAW,EAAK2B,MAAMqC,QACtB/D,aAAcuD,GAAMA,EAAGvB,KACvB/B,SAAU,EAAKyB,MAAMzB,SACrBC,OAAQ,EAAKgD,MAAMhD,aAQ3B,6BACG2D,KAAKnC,MAAMkB,SAASL,KAAI,SAACkC,EAAShC,GACjC,OACE,kBAAC,EAAD,CACE/C,MAAO+E,EACPH,IAAK7B,EAAI,aACT9C,KAAK,WACLC,KAAK,YACLC,QAAS4C,EACT3C,aAAc,EAAKA,aACnBC,UAAW,EAAK2B,MAAMqC,QACtB/D,aAAc,EAAKkD,MAAMpB,KAAKc,SAAS8B,SAASjC,GAChDxC,SAAU,EAAKyB,MAAMzB,SACrBC,OAAQ,EAAKgD,MAAMhD,aAK3B,4BAAQe,UAAWC,IAAOyD,UAAWN,UAAWR,KAAKZ,eAArD,2DAGGY,KAAKnC,MAAMzB,UAEZ,kBAAC,IAAD,CAAM2E,GAAG,SACP,4BAAQ3D,UAAWC,IAAO2D,OAA1B,+KAKFhB,KAAKnC,MAAMzB,UAEX,4BAAQgB,UAAWC,IAAO2D,MAAOV,QAASN,KAAKT,YAA/C,iHAnRZ,GAA8B0B,aCTjBC,EAAb,kDAEE,WAAYrD,GAAe,IAAD,8BACxB,cAAMA,IAORI,KAAqB,CACnBO,YAAa,GACbO,SAAU,GACVb,QAAS,IAXe,EAwC1BkC,aAAe,SAACrD,EAAwBkB,GACtClB,EAAM4C,iBAEN,EAAK3B,UAAS,SAACpB,GAAD,MAAgB,CAC5BuE,MAAM,GAAD,mBAAMvE,EAAUuE,OAAhB,gBAA2BlD,KAChCiC,SAAS,MAGXkB,QAAQC,IAAIpD,IA9CZ,EAAKoB,MAAQ,CACX8B,MAAO,GACPjB,SAAS,GAJa,EAF5B,gEAkBI,IAAMoB,EAAmBC,aAAaC,QAAQ,SAE1CF,EACFtB,KAAKhC,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IACEuE,MAAM,YAAKM,KAAKC,MAAMJ,SAGtCC,aAAaI,QAAQ,QAASF,KAAKG,UAAU,OAzBnD,yCA+BqB3B,EAAkBrD,GAC/BoD,KAAKX,MAAM8B,QAAUvE,EAAUuE,OACjCI,aAAaI,QAAQ,QAASF,KAAKG,UAAU5B,KAAKX,MAAM8B,QAGtDnB,KAAKX,MAAMa,SACbF,KAAKhC,UAAU,SAACpB,GAAD,mBAAC,eAAmBA,GAApB,IAA+BsD,SAAS,SArC7D,+BAwDI,OACE,kBAAC,EAAD,CACE9D,UAAU,EACVgE,aAAcJ,KAAKI,aACnBrB,SAAU,CAAC,sDAAe,gDAAc,sDAAe,6DACvDd,KAAM+B,KAAK/B,KACXiC,QAASF,KAAKX,MAAMa,cA9D5B,GAAiCe,a,iBCIpBY,EAAb,kDAEE,WAAYhE,GAAe,IAAD,8BACxB,cAAMA,IA4BRiE,gBAAkB,SAACC,GACjB,EAAK/D,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IAEZoF,cAAepF,EAAUoF,aACzBC,WAAW,eAAKrF,EAAUuE,MAAMY,IAChCG,gBAAiBH,QAlCK,EAsC1B3B,aAAe,SAACrD,EAAwBkB,GAGtC,GAFAlB,EAAM4C,iBAE6B,OAA/B,EAAKN,MAAM6C,gBAuBb,MAAM,IAAI3D,MAAM,mCAtBhB,IAAM4D,EAAgD,IAA5B,EAAK9C,MAAM8B,MAAM7C,OACvC,GACA,EAAKe,MAAM8B,MAAM9C,MACjB,EACA,EAAKgB,MAAM6C,iBAETE,EACJ,EAAK/C,MAAM8B,MAAM7C,QAAU,EAAKe,MAAM6C,gBAAkB,EACpD,GACA,EAAK7C,MAAM8B,MAAM9C,MACjB,EAAKgB,MAAM6C,gBAAkB,EAC7B,EAAK7C,MAAM8B,MAAM7C,QAGvB8C,QAAQC,IAAIc,EAAmBC,GAC/B,EAAKpE,UAAS,iBAAO,CACnBmD,MAAM,GAAD,mBAAMgB,GAAN,gBAA6BlE,IAA7B,YAAuCmE,IAC5ClC,SAAS,MAGXkB,QAAQC,IAAIpD,IA3Dd,EAAKoB,MAAQ,CACX8B,MAAO,GACPa,cAAc,EACdC,WAAY,CAACzD,YAAa,GAAIN,QAAS,GAAIa,SAAU,IACrDmD,gBAAiB,KACjBhC,SAAS,GARa,EAF5B,gEAgBI,IAAMmC,EAAcd,aAAaC,QAAQ,SACtB,MAAfa,GACFrC,KAAKhC,UAAS,SAACpB,GAAD,mBAAC,eACVA,GADS,IAEZuE,MAAOM,KAAKC,MAAMW,UApB1B,yCAyBqBpC,EAAkBrD,GAC/BoD,KAAKX,MAAM8B,QAAUvE,EAAUuE,OACjCI,aAAaI,QAAQ,QAASF,KAAKG,UAAU5B,KAAKX,MAAM8B,UA3B9D,+BAsEY,IAAD,OACP,OAAgC,IAA5BnB,KAAKX,MAAM8B,MAAM7C,OAEjB,6BACE,8HAIC0B,KAAKX,MAAM2C,aA2BZ,6BACE,kBAAC,EAAD,CACE5F,UAAU,EACVgE,aAAcJ,KAAKI,aACnBrB,SAAU,CACR,sDACA,gDACA,sDACA,6DAEFd,KAAM+B,KAAKX,MAAM4C,cAnCrB,yBAAK7E,UAAWC,IAAOI,WACrB,oGACCuC,KAAKX,MAAM8B,MAAMzC,KAAI,SAAC4D,EAAM1D,GAC3B,OACE,yBACExB,UAAWC,IAAOkF,cAClB9B,IAAK7B,EAAC,UAAM0D,EAAK9D,cAEjB,2BACG,IACAI,EAAI,EAFP,KAEY0D,EAAK9D,aAEjB,4BACEpB,UAAWC,IAAOyD,UAClBR,QAAS,kBAAM,EAAKwB,gBAAgBlD,KAFtC,uGA5FlB,GAAkCqC,aCPrBuB,EAAM,WACjB,OACE,yBAAKpF,UAAU,aAEb,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOqF,KAAK,IAAIC,UAAWxB,EAAayB,OAAK,IAC7C,kBAAC,IAAD,CAAOF,KAAK,QAAQC,UAAWb,OCDnBe,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,SD8HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzC,QAAQyC,MAAMA,EAAMC,a,kBEhJ5BpI,EAAOC,QAAU,CAAC,QAAU,0BAA0B,WAAa,6BAA6B,UAAY,4BAA4B,UAAY,4BAA4B,MAAQ,wBAAwB,UAAY,4BAA4B,YAAc,iC","file":"static/js/main.1e7e8dfb.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Input_container__Ynsw3\",\"textInput\":\"Input_textInput__waVzB\",\"checkInput\":\"Input_checkInput__IsJv4\",\"teacherLabel\":\"Input_teacherLabel__1ARyl\",\"edited\":\"Input_edited__1GpSP\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"EditTaskForm_container__xwVaL\",\"taskContainer\":\"EditTaskForm_taskContainer__XVMBb\",\"submitBtn\":\"EditTaskForm_submitBtn__Y0Ssf\"};","import React, {useCallback, useEffect, useState} from \"react\";\r\nimport styles from \"./Input.module.css\";\r\nimport {ChangeHandleTypes, HandleSwitchTypes} from \"../../types\";\r\n\r\ntype Props = {\r\n  label: string;\r\n  type: \"text\" | \"checkbox\";\r\n  name: HandleSwitchTypes;\r\n  inputId?: number;\r\n  changeHandle?: ChangeHandleTypes;\r\n  isCleared?: boolean;\r\n  defaultValue: string | boolean;\r\n  editMode?: boolean;\r\n  isUndo?: boolean;\r\n}\r\n\r\nexport const Input: React.FC<Props> = (\r\n  {\r\n    label,\r\n    type,\r\n    name,\r\n    inputId,\r\n    changeHandle,\r\n    isCleared,\r\n    defaultValue,\r\n    editMode,\r\n    isUndo\r\n  }) => {\r\n\r\n  const [inputState, setInputState] = useState({[name]: defaultValue});\r\n\r\n  const [editedClassName, setEditedClassName] = useState(\"\");\r\n\r\n  /**\r\n   ** If edit mode reload inputs values from default with props\r\n   ** If cleared clean inputs\r\n   **/\r\n  useEffect(() => {\r\n\r\n    if(editMode) {\r\n      setInputState((prevState => ({...prevState, [name]: defaultValue })));\r\n      if(isUndo) {\r\n        setEditedClassName(\"\");\r\n      }\r\n    }\r\n\r\n    if(isCleared) {\r\n      if (name === \"isChecked\") {\r\n        setInputState({[name]: false});\r\n      }\r\n      else {\r\n        setInputState({[name]: \"\"});\r\n      }\r\n    }\r\n  }, [isCleared, name, defaultValue, editMode, isUndo]);\r\n\r\n\r\n  const handleInputChange = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {\r\n\r\n    const target = event.target;\r\n\r\n    const value = target.name === \"isChecked\" ? target.checked : target.value;\r\n\r\n    setInputState((prevState) => ({\r\n      ...prevState, [target.name] : value\r\n    }));\r\n\r\n    if(editMode && !isUndo) {\r\n      setEditedClassName(\"edited\");\r\n    }\r\n\r\n    changeHandle && changeHandle(value, name, inputId);\r\n\r\n  }, [changeHandle, inputId, name, editMode, isUndo]);\r\n\r\n  const attr = type === \"checkbox\"\r\n    ? {className: `${styles.checkInput} ${styles[editedClassName]}`, type, name, checked: !!inputState[name]}\r\n    : {className: `${styles.textInput} ${styles[editedClassName]}`, type, name, value: inputState[name].toString()};\r\n\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <label>\r\n        <p className={type === \"checkbox\" ? styles.teacherLabel : \"\"}>{label} :</p>\r\n        <input {...attr} onChange={handleInputChange}/>\r\n      </label>\r\n    </div>\r\n  );\r\n};","import React, {Component} from \"react\";\r\nimport {Input} from \"../Input/Input\";\r\nimport styles from \"./TaskForm.module.css\";\r\nimport {Link} from \"react-router-dom\";\r\nimport {ChangeHandleTypes, FormSaveData} from \"../../types\";\r\n\r\n\r\ntype Props = {\r\n  editMode: boolean;\r\n  handleSubmit: (e: React.FormEvent, data: FormSaveData) => void;\r\n  teachers: string[];\r\n  data: FormSaveData;\r\n  isSaved?: boolean;\r\n}\r\ntype State = {\r\n  data: FormSaveData;\r\n  isUndo?: boolean;\r\n}\r\n\r\nexport class TaskForm extends Component <Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      data: {\r\n        description: \"\",\r\n        answers: [],\r\n        teachers: []\r\n      },\r\n      isUndo: false\r\n    };\r\n  }\r\n\r\n  //Set to store prop data\r\n  componentDidMount() {\r\n    this.setState((prevState) => ({\r\n      ...prevState, data: {...prevState.data, ...this.props.data}\r\n    }));\r\n  }\r\n\r\n  //Check for undo changes for recycle process\r\n  componentDidUpdate(prevProps: Props) {\r\n\r\n    if (prevProps.isSaved !== this.props.isSaved) {\r\n      this.setState((prevState) => ({\r\n        ...prevState, data: {...prevState.data, ...this.props.data}\r\n      }));\r\n    }\r\n\r\n    if (this.state.isUndo) {\r\n      this.setState((prevState) => ({\r\n        ...prevState, isUndo: false\r\n      }));\r\n    }\r\n\r\n  }\r\n\r\n  title = this.props.editMode\r\n    ? \"Форма редактирования задачи\"\r\n    : \"Форма добавления задачи\";\r\n\r\n  addAnswer = () => {\r\n    this.setState((prevState) => ({\r\n      ...prevState, data: {...prevState.data, answers: [...prevState.data.answers, {text: \"\"}]}\r\n    }));\r\n  }\r\n\r\n  delAnswer = () => {\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      data: {...prevState.data, answers: prevState.data.answers.slice(0, prevState.data.answers.length - 1)}\r\n    }));\r\n  }\r\n\r\n  //Process change handlers by different input types\r\n  changeHandle: ChangeHandleTypes = (value, type, inputId) => {\r\n    switch (type) {\r\n    case \"description\" : {\r\n      if(typeof (value) === \"string\") {\r\n        this.setState((prevState) => ({\r\n          ...prevState, data: {...prevState.data, description: value}\r\n        }));\r\n      }\r\n      else {\r\n        throw new Error(\"Error with value type\");\r\n      }\r\n      break;\r\n    }\r\n    case \"answer\": {\r\n      if(typeof (value) === \"string\") {\r\n        this.setState((prevState) => {\r\n          if (inputId !== undefined) {\r\n            //Check message by inputId and if we have it - change only this message else add new message\r\n            const answer = prevState.data.answers[inputId];\r\n\r\n            if (answer) {\r\n              return {\r\n                ...prevState, data: {\r\n                  ...prevState.data, answers: prevState.data.answers.map((answer, i) => {\r\n                    return i === inputId ? {...answer, text: value} : answer;\r\n                  })\r\n                }\r\n              };\r\n            } else {\r\n              return {\r\n                ...prevState, data: {\r\n                  ...prevState.data, answers: [...prevState.data.answers, {text: value}]\r\n                }\r\n              };\r\n            }\r\n\r\n          } else {\r\n            throw new Error(\"Input id is undefined\");\r\n          }\r\n        });\r\n      }\r\n\r\n      break;\r\n    }\r\n\r\n    case \"isChecked\": {\r\n      if (inputId !== undefined) {\r\n        this.setState((prevState) => {\r\n          //Use set to exclude repeat of check/uncheck\r\n          const setOfTeachers = new Set([...prevState.data.teachers, inputId]);\r\n          if (!value) {\r\n            setOfTeachers.delete(inputId);\r\n          }\r\n\r\n          return {\r\n            ...prevState, data: {...prevState.data, teachers: [...Array.from(setOfTeachers).sort()]}\r\n          };\r\n\r\n\r\n        });\r\n      } else {\r\n        throw new Error(\"Input id is undefined\");\r\n      }\r\n    }\r\n\r\n    }\r\n  }\r\n\r\n  //Check for submit disable\r\n  checkSubmit = () => {\r\n    return (this.state.data.description !== \"\")\r\n      && (this.state.data.answers.length > 0)\r\n      && (this.state.data.answers.every(answer => answer.text !== \"\"))\r\n      && (this.state.data.teachers.length > 0);\r\n  }\r\n\r\n  udoChanges = () => {\r\n    this.setState((prevState) => ({\r\n      ...prevState, data: {...this.props.data}, isUndo: true\r\n    }));\r\n  }\r\n  //Add main attr to answer\r\n  changeMainAnswer = (e: React.FormEvent, el: { main?: boolean; text: string }, type: string) => {\r\n    e.preventDefault();\r\n    const newAnswers = this.state.data.answers.map((answer) => {\r\n      if (el === answer) {\r\n        switch(type) {\r\n        case \"add\": {\r\n          return ({...answer, main: true});\r\n        }\r\n        case \"del\": {\r\n          return ({text: answer.text});\r\n        }\r\n        default: return answer;\r\n        }\r\n      } else {\r\n        return answer;\r\n      }\r\n    });\r\n\r\n    this.setState((prevState) => ({\r\n      ...prevState, data: {...prevState.data, answers: newAnswers}\r\n    }))\r\n    ;\r\n  }\r\n\r\n  //Check for disabling making main button\r\n  checkMainChoosed = () => {\r\n    return this.state.data.answers.some(answer => answer.main || answer.text === \"\");\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h2>{this.title}</h2>\r\n\r\n        <form className=\"form\" onSubmit={(e) => this.props.handleSubmit(e, this.state.data)}>\r\n\r\n          <Input\r\n            label=\"Условие\"\r\n            type={\"text\"}\r\n            name=\"description\"\r\n            changeHandle={this.changeHandle}\r\n            isCleared={this.props.isSaved}\r\n            defaultValue={this.state.data.description}\r\n            editMode={this.props.editMode}\r\n            isUndo={this.state.isUndo}\r\n          />\r\n\r\n          <div className={styles.answers}>\r\n            <p>Варианты ответа:</p>\r\n            <div>\r\n              <button\r\n                className={styles.answersBtn}\r\n                type=\"button\"\r\n                onClick={this.addAnswer}\r\n              >\r\n                +\r\n              </button>\r\n              <button\r\n                className={`${styles.answersBtn} ${styles.deleteBtn}`}\r\n                type=\"button\"\r\n                onClick={this.delAnswer}\r\n                disabled={this.state.data.answers.length === 0}\r\n              >\r\n                -\r\n              </button>\r\n            </div>\r\n          </div>\r\n\r\n          {this.state.data.answers.map((el, i) => {\r\n\r\n            return (\r\n              <div key={i + \"main\"}>\r\n                <div>\r\n                  <button\r\n                    className={styles.doMainBtn}\r\n                    onClick={(e) =>this.changeMainAnswer(e, el, \"add\")}\r\n                    disabled={this.checkMainChoosed()}\r\n                  >\r\n                    Сделать основным\r\n                  </button>\r\n\r\n                  <button\r\n                    className={styles.undoMainBtn}\r\n                    onClick={(e) =>this.changeMainAnswer(e, el, \"del\")}\r\n                  >\r\n                    Отменить\r\n                  </button>\r\n                </div>\r\n\r\n                <Input\r\n                  label={`Ответ № ${i + 1}   ${el.main ? \"- Основной\" : \" \"}`}\r\n                  type=\"text\"\r\n                  name=\"answer\"\r\n                  inputId={i}\r\n                  changeHandle={this.changeHandle}\r\n                  isCleared={this.props.isSaved}\r\n                  defaultValue={el && el.text}\r\n                  editMode={this.props.editMode}\r\n                  isUndo={this.state.isUndo}\r\n                />\r\n              </div>\r\n\r\n\r\n            );\r\n          })}\r\n\r\n          <div>\r\n            {this.props.teachers.map((teacher, i) => {\r\n              return (\r\n                <Input\r\n                  label={teacher}\r\n                  key={i + \"Teacher id\"}\r\n                  type=\"checkbox\"\r\n                  name=\"isChecked\"\r\n                  inputId={i}\r\n                  changeHandle={this.changeHandle}\r\n                  isCleared={this.props.isSaved}\r\n                  defaultValue={this.state.data.teachers.includes(i)}\r\n                  editMode={this.props.editMode}\r\n                  isUndo={this.state.isUndo}\r\n                />);\r\n            })}\r\n          </div>\r\n\r\n          <button className={styles.submitBtn} disabled={!this.checkSubmit()}>Сохранить</button>\r\n\r\n          {\r\n            !this.props.editMode\r\n            &&\r\n            <Link to=\"/edit\">\r\n              <button className={styles.goBtn}>Отредактировать текущие задачи</button>\r\n            </Link>\r\n          }\r\n\r\n          {\r\n            this.props.editMode\r\n            &&\r\n            <button className={styles.goBtn} onClick={this.udoChanges}>Отменить изменения</button>\r\n          }\r\n\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n\r\n\r\n}\r\n\r\n","import React, {Component} from \"react\";\r\nimport {FormSaveData} from \"../../types\";\r\nimport {TaskForm} from \"../TaskForm/TaskForm\";\r\n\r\ntype State = {\r\n  tasks: FormSaveData [];\r\n  isSaved: boolean;\r\n}\r\ntype Props = {}\r\n\r\nexport class AddTaskForm extends Component<Props, State> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = {\r\n      tasks: [],\r\n      isSaved: false\r\n    };\r\n  }\r\n\r\n  data: FormSaveData = {\r\n    description: \"\",\r\n    teachers: [],\r\n    answers: []\r\n  }\r\n\r\n  //Fetch Data from local storage while mount\r\n  componentDidMount() {\r\n    const tasksFromStorage = localStorage.getItem(\"tasks\");\r\n\r\n    if (tasksFromStorage) {\r\n      this.setState((prevState) => ({\r\n        ...prevState, tasks: [...JSON.parse(tasksFromStorage)]\r\n      }));\r\n    } else {\r\n      localStorage.setItem(\"tasks\", JSON.stringify([]));\r\n    }\r\n\r\n  }\r\n\r\n  //If have success changes save to storage and recycle save flow\r\n  componentDidUpdate(prevProps: Props, prevState: State) {\r\n    if (this.state.tasks !== prevState.tasks) {\r\n      localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n    }\r\n\r\n    if (this.state.isSaved) {\r\n      this.setState(((prevState) => ({...prevState, isSaved: false})));\r\n    }\r\n\r\n  }\r\n\r\n  handleSubmit = (event: React.FormEvent, data: FormSaveData) => {\r\n    event.preventDefault();\r\n\r\n    this.setState((prevState) => ({\r\n      tasks: [...prevState.tasks, {...data}],\r\n      isSaved: true\r\n    }));\r\n\r\n    console.log(data);\r\n\r\n  }\r\n\r\n  render() {\r\n\r\n    return (\r\n      <TaskForm\r\n        editMode={false}\r\n        handleSubmit={this.handleSubmit}\r\n        teachers={[\"Иванов И.И.\", \"Жуков Д.К.\", \"Петров И.И.\", \"Сидоров А.А.\"]}\r\n        data={this.data}\r\n        isSaved={this.state.isSaved}\r\n      />\r\n    );\r\n  }\r\n}","import React, {Component} from \"react\";\r\nimport {FormSaveData} from \"../../types\";\r\nimport styles from \"./EditTaskForm.module.css\";\r\nimport {TaskForm} from \"../TaskForm/TaskForm\";\r\n\r\ntype State = {\r\n  tasks: FormSaveData[];\r\n  isEditActive: boolean;\r\n  editedTask: FormSaveData;\r\n  editedTaskIndex: number | null;\r\n  isSaved: boolean;\r\n};\r\ntype Props = {};\r\n\r\nexport class EditTaskForm extends Component<Props, State> {\r\n\r\n  constructor(props: Props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      tasks: [],\r\n      isEditActive: false,\r\n      editedTask: {description: \"\", answers: [], teachers: []},\r\n      editedTaskIndex: null,\r\n      isSaved: false,\r\n    };\r\n  }\r\n\r\n  // Set task to state from local storage on mount\r\n  componentDidMount() {\r\n    const storedTasks = localStorage.getItem(\"tasks\");\r\n    if (storedTasks != null) {\r\n      this.setState((prevState) => ({\r\n        ...prevState,\r\n        tasks: JSON.parse(storedTasks),\r\n      }));\r\n    }\r\n  }\r\n  //If have success changes save to storage\r\n  componentDidUpdate(prevProps: Props, prevState: State) {\r\n    if (this.state.tasks !== prevState.tasks) {\r\n      localStorage.setItem(\"tasks\", JSON.stringify(this.state.tasks));\r\n    }\r\n  }\r\n  //If selected item to change save it and it`s index to store. Make edited status\r\n  switchEditState = (index: number) => {\r\n    this.setState((prevState) => ({\r\n      ...prevState,\r\n      isEditActive: !prevState.isEditActive,\r\n      editedTask: {...prevState.tasks[index]},\r\n      editedTaskIndex: index,\r\n    }));\r\n  };\r\n\r\n  handleSubmit = (event: React.FormEvent, data: FormSaveData) => {\r\n    event.preventDefault();\r\n\r\n    if (this.state.editedTaskIndex !== null) {\r\n      const editedTasksBefore = this.state.tasks.length === 1\r\n        ? []\r\n        : this.state.tasks.slice(\r\n          0,\r\n          this.state.editedTaskIndex\r\n        );\r\n      const editedTasksAfter =\r\n        this.state.tasks.length <= this.state.editedTaskIndex + 1\r\n          ? []\r\n          : this.state.tasks.slice(\r\n            this.state.editedTaskIndex + 1,\r\n            this.state.tasks.length\r\n          );\r\n\r\n      console.log(editedTasksBefore, editedTasksAfter);\r\n      this.setState(() => ({\r\n        tasks: [...editedTasksBefore, {...data}, ...editedTasksAfter],\r\n        isSaved: true,\r\n      }));\r\n\r\n      console.log(data);\r\n    } else {\r\n      throw new Error(\"Error with index of edited task\");\r\n    }\r\n  };\r\n\r\n  render() {\r\n    if (this.state.tasks.length === 0) {\r\n      return (\r\n        <div>\r\n          <h2>Список задач пуст!</h2>\r\n        </div>\r\n      );\r\n    } else {\r\n      if (!this.state.isEditActive) {\r\n        return (\r\n          <div className={styles.container}>\r\n            <h2>Список задач:</h2>\r\n            {this.state.tasks.map((task, i) => {\r\n              return (\r\n                <div\r\n                  className={styles.taskContainer}\r\n                  key={i + `${task.description}`}\r\n                >\r\n                  <p>\r\n                    {\" \"}\r\n                    {i + 1}. {task.description}\r\n                  </p>\r\n                  <button\r\n                    className={styles.submitBtn}\r\n                    onClick={() => this.switchEditState(i)}\r\n                  >\r\n                    Отредактировать\r\n                  </button>\r\n                </div>\r\n              );\r\n            })}\r\n          </div>\r\n        );\r\n      } else {\r\n        return (\r\n          <div>\r\n            <TaskForm\r\n              editMode={true}\r\n              handleSubmit={this.handleSubmit}\r\n              teachers={[\r\n                \"Иванов И.И.\",\r\n                \"Жуков Д.К.\",\r\n                \"Петров И.И.\",\r\n                \"Сидоров А.А.\",\r\n              ]}\r\n              data={this.state.editedTask}\r\n            />\r\n          </div>\r\n        );\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from \"react\";\nimport {Route, Switch} from \"react-router-dom\";\nimport \"./App.css\";\nimport {AddTaskForm} from \"./components/AddTaskForm/AddTaskForm\";\nimport {EditTaskForm} from \"./components/EditTaskForm/EditTaskForm\";\n\n\nexport const App = () => {\n  return (\n    <div className=\"container\">\n\n      <Switch>\n        <Route path=\"/\" component={AddTaskForm} exact />\n        <Route path=\"/edit\" component={EditTaskForm} />\n      </Switch>\n\n    </div>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport \"./index.css\";\nimport { App } from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Router>\n      <App />\n    </Router>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"answers\":\"TaskForm_answers__3AJ8z\",\"answersBtn\":\"TaskForm_answersBtn__3AXzh\",\"deleteBtn\":\"TaskForm_deleteBtn__CzsfC\",\"submitBtn\":\"TaskForm_submitBtn__26RWP\",\"goBtn\":\"TaskForm_goBtn__1iIeg\",\"doMainBtn\":\"TaskForm_doMainBtn__1vu64\",\"undoMainBtn\":\"TaskForm_undoMainBtn__2ig8b\"};"],"sourceRoot":""}